-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Program.Par
  ( happyError
  , myLexer
  , pProgram
  , pRoutineDecl
  , pListDecl
  , pListExpr
  , pListIdent
  , pDecl
  , pStatement
  , pExpr3
  , pExpr2
  , pExpr1
  , pExpr
  , pExpr4
  ) where

import Prelude

import qualified Program.Abs
import Program.Lex

}

%name pProgram Program
%name pRoutineDecl RoutineDecl
%name pListDecl ListDecl
%name pListExpr ListExpr
%name pListIdent ListIdent
%name pDecl Decl
%name pStatement Statement
%name pExpr3 Expr3
%name pExpr2 Expr2
%name pExpr1 Expr1
%name pExpr Expr
%name pExpr4 Expr4
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '%'      { PT _ (TS _ 1)  }
  '('      { PT _ (TS _ 2)  }
  ')'      { PT _ (TS _ 3)  }
  '*'      { PT _ (TS _ 4)  }
  '+'      { PT _ (TS _ 5)  }
  ','      { PT _ (TS _ 6)  }
  '-'      { PT _ (TS _ 7)  }
  '/'      { PT _ (TS _ 8)  }
  ':'      { PT _ (TS _ 9)  }
  ';'      { PT _ (TS _ 10) }
  '='      { PT _ (TS _ 11) }
  'and'    { PT _ (TS _ 12) }
  'def'    { PT _ (TS _ 13) }
  'else'   { PT _ (TS _ 14) }
  'for'    { PT _ (TS _ 15) }
  'if'     { PT _ (TS _ 16) }
  'in'     { PT _ (TS _ 17) }
  'not'    { PT _ (TS _ 18) }
  'or'     { PT _ (TS _ 19) }
  'range'  { PT _ (TS _ 20) }
  'return' { PT _ (TS _ 21) }
  'while'  { PT _ (TS _ 22) }
  'xor'    { PT _ (TS _ 23) }
  '{'      { PT _ (TS _ 24) }
  '}'      { PT _ (TS _ 25) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }

%%

Ident :: { Program.Abs.Ident }
Ident  : L_Ident { Program.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Program :: { Program.Abs.Program }
Program : ListDecl { Program.Abs.Program $1 }

RoutineDecl :: { Program.Abs.RoutineDecl }
RoutineDecl
  : 'def' Ident '(' ListIdent ')' ':' '{' ListDecl '}' { Program.Abs.RoutineDecl $2 $4 $8 }

ListDecl :: { [Program.Abs.Decl] }
ListDecl
  : {- empty -} { [] }
  | Decl { (:[]) $1 }
  | Decl ';' ListDecl { (:) $1 $3 }

ListExpr :: { [Program.Abs.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

ListIdent :: { [Program.Abs.Ident] }
ListIdent
  : {- empty -} { [] }
  | Ident { (:[]) $1 }
  | Ident ',' ListIdent { (:) $1 $3 }

Decl :: { Program.Abs.Decl }
Decl
  : 'return' Expr { Program.Abs.DeclReturn $2 }
  | Statement { Program.Abs.DeclStatement $1 }
  | RoutineDecl { Program.Abs.DeclDef $1 }

Statement :: { Program.Abs.Statement }
Statement
  : Ident '=' Expr { Program.Abs.Assign $1 $3 }
  | Ident '(' ListExpr ')' { Program.Abs.RoutineCall $1 $3 }
  | 'while' '(' Expr ')' ':' '{' ListDecl '}' { Program.Abs.WhileLoop $3 $7 }
  | 'for' '(' Ident 'in' 'range' '(' Expr ',' Expr ')' ')' ':' '{' ListDecl '}' { Program.Abs.ForLoop $3 $7 $9 $14 }
  | 'if' '(' Expr ')' ':' '{' ListDecl '}' { Program.Abs.If $3 $7 }
  | 'if' '(' Expr ')' ':' '{' ListDecl '}' 'else' ':' '{' ListDecl '}' { Program.Abs.IfElse $3 $7 $12 }

Expr3 :: { Program.Abs.Expr }
Expr3
  : Integer { Program.Abs.EInt $1 }
  | Ident { Program.Abs.EVar $1 }
  | 'not' Expr4 { Program.Abs.ENot $2 }
  | '(' Expr ')' { $2 }

Expr2 :: { Program.Abs.Expr }
Expr2
  : Expr2 '*' Expr3 { Program.Abs.ETimes $1 $3 }
  | Expr2 '/' Expr3 { Program.Abs.EDiv $1 $3 }
  | Expr2 '%' Expr3 { Program.Abs.ERem $1 $3 }
  | Expr3 { $1 }

Expr1 :: { Program.Abs.Expr }
Expr1
  : Expr1 '+' Expr2 { Program.Abs.EPlus $1 $3 }
  | Expr1 '-' Expr2 { Program.Abs.EMinus $1 $3 }
  | Expr2 { $1 }

Expr :: { Program.Abs.Expr }
Expr
  : Expr 'and' Expr1 { Program.Abs.EAND $1 $3 }
  | Expr 'or' Expr1 { Program.Abs.EOR $1 $3 }
  | Expr 'xor' Expr1 { Program.Abs.EXOR $1 $3 }
  | Expr1 { $1 }

Expr4 :: { Program.Abs.Expr }
Expr4 : Expr3 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

