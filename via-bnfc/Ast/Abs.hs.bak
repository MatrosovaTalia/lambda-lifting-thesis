-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Ast.

module Ast.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Ast = Ast [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl
    = DeclReturn Expr
    | DeclStatement Statement
    | DeclDef Ident [Ident] [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Statement
    = Assign Ident Expr
    | RoutineCall Ident [Expr]
    | WhileLoop Expr [Decl]
    | ForLoop Ident Expr Expr [Decl]
    | If Expr [Decl]
    | IfElse Expr [Decl] [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EInt Integer
    | EVar Ident
    | ERCall Ident [Expr]
    | ENeg Expr
    | ENot Expr
    | ETimes Expr Expr
    | EDiv Expr Expr
    | ERem Expr Expr
    | EPlus Expr Expr
    | EMinus Expr Expr
    | EAND Expr Expr
    | EOR Expr Expr
    | EXOR Expr Expr
    | ELess Expr Expr
    | EGrt Expr Expr
    | EELess Expr Expr
    | EEGrt Expr Expr
    | EEQUAL Expr Expr
    | ENEQUAL Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

